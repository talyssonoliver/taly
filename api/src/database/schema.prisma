// more about in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String?
  lastName      String?
  role          String         @default("user")
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt   @map("updated_at")
  resetPasswordToken String?   @map("reset_password_token")
  profileImage  String?   @map("profile_image")
  phoneNumber   String?   @map("phone_number")
  
  // Relations
  salons         Salon[]
  staffProfile  Staff?
  subscriptions  Subscription[]

  @@map("users")
}

// Salon management
model Salon {
  id          String        @id @default(uuid())
  ownerId       String    @unique @map("owner_id")
  name        String
  description   String?
  logoUrl       String?   @map("logo_url")
  address     String?
  postCode       String?   @map("post_code")
  phoneNumber   String?   @map("phone_number")
  email       String
  websiteSlug   String?   @unique @map("website_slug")
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  owner       User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  services    Service[]
  appointments Appointment[]
  staff         Staff[]
  clients       Client[]
  workingHours  WorkingHours[]
  subscription  Subscription?
  website       Website?
  
  @@map("salons")
}

// Service model
model Service {
  id          String        @id @default(uuid())
  salonId     String        @map("salon_id")
  staffId     String?       @map("staff_id")
  name        String
  description String?
  duration    Int           // in minutes
  price       Decimal       @db.Decimal(10, 2)
  discount    Decimal?      @db.Decimal(10, 2)
  isActive    Boolean       @default(true) @map("is_active")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt    @map("updated_at")
  available   Boolean       @default(true)
  imageServiceUrl       String?   @map("image_service_url")
  
  // Relations
  salon       Salon         @relation(fields: [salonId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  staff       Staff?        @relation("ServiceToStaff", fields: [staffId], references: [id])
  
  @@map("services")
}

// Staff model
 model Staff {
  id          String    @id @default(uuid())
  userId      String    @unique @map("user_id")
  salonId     String    @map("salon_id")
  bio         String?
  position    String?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  salon       Salon     @relation(fields: [salonId], references: [id])
  appointments Appointment[]
  schedule    StaffSchedule[]
  services    Service[] @relation("ServiceToStaff")
  
  @@map("staff")
}

 model WorkingHours {
  id        String    @id @default(uuid())
  salonId   String    @map("salon_id")
  dayOfWeek Int       @map("day_of_week")
  openTime  String    @map("open_time")
  closeTime String    @map("close_time")
  isClosed  Boolean   @default(false) @map("is_closed")

  // Relations
  salon     Salon     @relation(fields: [salonId], references: [id])
  
  @@map("working_hours")
}

model StaffSchedule {
  id        String    @id @default(uuid())
  staffId   String    @map("staff_id")
  dayOfWeek Int       @map("day_of_week")
  startTime String    @map("start_time")
  endTime   String    @map("end_time")
  isActive  Boolean   @default(true) @map("is_active")

  // Relations
  staff     Staff     @relation(fields: [staffId], references: [id])
  
  @@map("staff_schedule")
}

// Client Management
model Client {
  id          String    @id @default(uuid())
  salonId     String    @map("salon_id")
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  email       String?
  phoneNumber String?   @map("phone_number")
  notes       String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  imageClientUrl String?   @map("image_client_url")

  // Relations
  salon       Salon     @relation(fields: [salonId], references: [id])
  appointments Appointment[]
  clientNote       ClientNote[]
  
  @@map("clients")
}

model ClientNote {
  id        String    @id @default(uuid())
  clientId  String    @map("client_id")
  note      String
  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")

  // Relations
  client    Client    @relation(fields: [clientId], references: [id])
  
  @@map("client_notes")
}

// Appointment model
model Appointment {
  id          String        @id @default(uuid())
  salonId     String    @map("salon_id")
  clientId    String    @map("client_id")
  staffId      String?  @map("staff_id")
  serviceId   String    @map("service_id")
  startTime   DateTime  @map("start_time")
  endTime     DateTime  @map("end_time")
  status      String        @default("scheduled")
  notes       String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // Relations
  salon       Salon         @relation(fields: [salonId], references: [id], onDelete: Cascade)
  client     Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service     Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff      Staff?    @relation(fields: [staffId], references: [id], onDelete: SetNull)
  payment     Payment?
  reminders  AppointmentReminder[]

  @@map("appointments")
}

model AppointmentReminder {
  id            String    @id @default(uuid())
  appointmentId String    @map("appointment_id")
  type          String
  sentAt        DateTime? @map("sent_at")
  status        String
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
 
  @@map("appointment_reminders")
}

// Payment management
model Payment {
  id            String      @id @default(uuid())
  appointmentId String      @unique @map("appointment_id")
  amount        Decimal     @db.Decimal(10, 2)
  status        String      @default("pending")
  paymentMethod String?
  transactionId String?
  provider      String
  providerId    String?   @map("provider_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  // Relations
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  refunds       Refund[]

  @@map("payments")
}

// Subscription model
model Subscription {
  id            String      @id @default(uuid())
  userId        String
  planType      String
  status        String
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  salonId       String?     @unique @map("salon_id")
  salon         Salon?      @relation(fields: [salonId], references: [id], onDelete: Cascade)
}

model Refund {
  id         String   @id @default(uuid())
  paymentId  String   @map("payment_id")
  amount     Decimal  @db.Decimal(10, 2)
  reason     String?
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  payment    Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  @@map("refunds")
}

model Website {
  id      String   @id @default(uuid())
  salonId String   @unique @map("salon_id")
  url     String
  // Relation
  salon   Salon    @relation(fields: [salonId], references: [id])
  
  @@map("websites")
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  token     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("password_resets")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("refresh_tokens")
}