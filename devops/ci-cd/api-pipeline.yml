name: Api CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'api/**'  # Trigger only on changes in the api directory
  pull_request:
    branches:
      - main
    paths:
      - 'api/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  
        cache: 'pnpm'      

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run linters
      run: pnpm lint   

    - name: Run tests
      run: pnpm test:cov  

    - name: Build Api
      run: pnpm build  

    - name: Check test coverage thresholds
      uses: 5monkeys/cobertura-action@v1
      with:
        path: coverage/api-coverage/coverage-final.json 
        minimum_coverage: 80 

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: taly-api # Replace with your ECR repo name
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./api/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to Kubernetes (Example using Kustomize)
        uses: kodermax/kubectl-kustomize-action@v1 # Example; adapt to your setup
        with:
          kustomize_config: ./devops/k8s
          args: apply -f k8s/deployments/

      # Add steps for database migrations, etc. here.  Consider using:
      #  - a separate job for database migrations (before deployment)
      #  - Kubernetes Jobs for running one-off tasks like migrations

      - name: Notify Slack on Success (Example)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: commit,author,took
          custom_payload: |
            {
              text: "âœ… Backend deployment successful on branch ${{ github.ref }}! <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>",
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure (Example)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: commit,message
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}